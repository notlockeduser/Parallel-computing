import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.LongStream;
import java.util.stream.Stream;

public class Main {
    static int SIZE = 50000;

    public static long[] getRandomArray(long[] array) {
        long randMin = 0L, randMax = 50L;
        for (int i = 0; i < SIZE; i++) {
            array[i] = ((long) (randMin + (Math.random() * randMax)));
        }
        // System.out.println(array.toString());
        return array;
    }

    public static long[] getNumberArray(long[] array) {
        for (int i = 0; i < SIZE; i++) {
            array[i] = i;
        }
        // System.out.println(array.toString());
        return array;
    }


    public static void main(String[] args) {
        long array1[] = new long[SIZE];
        long array2[] = new long[SIZE];
        long arrayAdd[] = new long[SIZE];

        getRandomArray(array1);
        getRandomArray(array2);
        getNumberArray(arrayAdd);

        long resultSerial[] = new long[SIZE];

        LongStream.of(arrayAdd).forEachOrdered(i -> {
            resultSerial[(int) i] = array1[(int) i] * array2[(int) i];
        });

        AtomicLongArray result = new AtomicLongArray(SIZE);

        LongStream.of(arrayAdd).parallel().forEachOrdered(i -> {
            long oldValue;
            long newValue;
            do {
                oldValue = result.get((int) i);
                newValue = array1[(int) i] * array2[(int) i];
            } while (!result.compareAndSet((int) i, oldValue, newValue));
        });

        LongStream.of(resultSerial).forEach(i -> System.out.print(i + " "));
        System.out.println("\n\n\n\n");
        Stream.of(result).forEach(i -> System.out.print(i + " "));
    }
}